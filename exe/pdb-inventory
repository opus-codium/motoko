#!/usr/bin/env ruby
# frozen_string_literal: true

require 'motoko'
require 'optparse'
require 'puppetdb'

filters = []

oparser = Motoko::OptionParser.new

options = {}

oparser.parse do |parser|
  parser.separator ''
  parser.separator 'Host Filters'

  parser.on('-C', '--wc', '--with-class CLASS', 'Match hosts with a certain config management class') do |with_class|
    filters << Motoko::Utils::PuppetDB.class_filter(with_class)
  end

  parser.on('-F', '--wf', '--with-fact fact=val', 'Match hosts with a certain fact') do |with_fact|
    filters << Motoko::Utils::PuppetDB.fact_filter(with_fact)
  end

  parser.on('-I', '--wi', '--with-identity IDENT', 'Match hosts with a certain configured identity') do |with_ident|
    filters << Motoko::Utils::PuppetDB.identity_filter(with_ident)
  end

  Motoko::OptionParser.add_shortcut_options(parser, oparser.formatter, options)
end

(options[:with_class] || []).compact.each do |klass|
  filters << class_filter(klass)
end

(options[:with_fact] || []).compact.each do |fact|
  filters << fact_filter(fact)
end

client = PuppetDB::Client.new

response = client.request('', "facts[certname, name, value] { #{filters.map { |f| "(#{f})" }.join(' and ')} }")

resources = response.data

nodes = Hash.new { |hash, value| hash[value] = {} }

resources.each do |fact|
  nodes[fact['certname']][fact['name']] = fact['value']
end

nodes.each do |sender, facts|
  oparser.formatter.nodes << Motoko::Node.new(sender, facts)
end

puts oparser.formatter.to_s
