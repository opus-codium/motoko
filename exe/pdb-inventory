#!/usr/bin/env ruby
# frozen_string_literal: true

require 'motoko'
require 'optparse'
require 'puppetdb'

def class_filter(klass)
  operator = '='

  if klass =~ %r{\A/.*/\z}
    klass = klass[1..-2]
    operator = '~'
  end

  "certname in resources[certname] { type = 'Class' and title #{operator} '#{klass.split('::').map(&:capitalize).join('::')}' }"
end

def fact_filter(fact)
  name, operator, value = fact.split(/([!<>]?=|[<>])/)

  if operator == '=' && value =~ %r{\A/.*/\z}
    value = value[1..-2]
    operator = '~'
  end

  begin
    value = Integer(value)
  rescue
    value = "'#{value}'"
  end

  "certname in inventory[certname] { facts.#{name} #{operator} #{value} }"
end

def identity_filter(identity)
  operator = '='

  if identity =~ %r{\A/.*/\z}
    identity = identity[1..-2]
    operator = '~'
  end

  "certname #{operator} '#{identity}'"
end

filters = []

oparser = Motoko::OptionParser.new

options = {}

oparser.parse do |parser|
  parser.separator ''
  parser.separator 'Host Filters'

  parser.on('-C', '--wc', '--with-class CLASS', 'Match hosts with a certain config management class') do |with_class|
    filters << class_filter(with_class)
  end

  parser.on('-F', '--wf', '--with-fact fact=val', 'Match hosts with a certain fact') do |with_fact|
    filters << fact_filter(with_fact)
  end

  parser.on('-I', '--wi', '--with-identity IDENT', 'Match hosts with a certain configured identity') do |with_ident|
    filters << identity_filter(with_ident)
  end

  Motoko::OptionParser.add_shortcut_options(parser, oparser.formatter, options)
end

(options[:with_class] || []).compact.each do |klass|
  filters << class_filter(klass)
end

(options[:with_fact] || []).compact.each do |fact|
  filters << fact_filter(fact)
end

client = PuppetDB::Client.new

response = client.request('', "facts[certname, name, value] { #{filters.map { |f| "(#{f})" }.join(' and ')} }")

resources = response.data

nodes = Hash.new { |hash, value| hash[value] = {} }

resources.each do |fact|
  nodes[fact['certname']][fact['name']] = fact['value']
end

nodes.each do |sender, facts|
  oparser.formatter.nodes << Motoko::Node.new({
                                                sender: sender,
                                                data: {
                                                  facts: facts,
                                                },
                                              })
end

puts oparser.formatter.to_s
